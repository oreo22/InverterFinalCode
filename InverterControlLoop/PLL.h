#include "IQmathLib.h"

#ifndef SPLL_1ph_SOGI_H_
#define SPLL_1ph_SOGI_H_

//*********** Structure Definition ********//
typedef struct{
float B1_notch;
float B0_notch;
float A2_notch;
float A1_notch;
}OSG_COEFF;
typedef struct{
float B1_lf;
float B0_lf;
float A1_lf;
}LPF_COEFF;
typedef struct{
float AC_input;
float theta[2];
float cos[2];
float sin[2];
float wo;
float wn;
OSG_COEFF notch_coeff;
LPF_COEFF lpf_coeff;
float Upd[3];
float ynotch[3];
float ylf[2];
float delta_t;
}SPLL_1ph_SOGI;

static const float sineTable[1024] ={0.001532500,0.003065000,0.004597400,0.006129900,0.007662300,0.009194800,0.01072720,0.01225960,0.01379190,
0.01532420,0.01685650,0.01838880,0.01992100,0.02145310,0.02298520,0.02451730,0.02604930,0.02758120,0.02911310,0.03064490,
0.03217660,0.03370830,0.03523980,0.03677130,0.03830270,0.03983400,0.04136530,0.04289640,0.04442740,0.04595830,0.04748910,
0.04901980,0.05055040,0.05208090,0.05361120,0.05514150,0.05667150,0.05820150,0.05973130,0.06126100,0.06279050,0.06431990,
	0.06584910,0.06737820,0.06890710,0.07043590,0.07196450,0.07349290,0.07502120,0.07654930,0.07807720,0.07960490,0.08113240,0.08265970,0.08418690,0.08571380,0.08724060,0.08876710,0.09029340,0.09181950,0.09334540,0.09487110,0.09639660,0.09792180,0.09944680,0.1009716,0.1024961,0.1040204,0.1055445
	,0.1070683,0.1085918,0.1101151,0.1116381,0.1131609,0.1146834,0.1162057,0.1177276,0.1192493,0.1207707,0.1222919,0.1238127,0.1253332
	,0.1268535,0.1283734,0.1298931,0.1314124,0.1329315,0.1344502,0.1359686,0.1374867,0.1390045,0.1405219,0.1420390,0.1435558,0.1450723,
	0.1465884,0.1481041,0.1496195,0.1511346,0.1526493,0.1541636,0.1556776,0.1571912,0.1587045,0.1602174,0.1617299,0.1632420,0.1647537,0.1662651,
	0.1677760,0.1692866,0.1707967,0.1723065,0.1738159,0.1753248,0.1768334,0.1783415,0.1798492,0.1813565,0.1828633,0.1843698,0.1858758,0.1873813,
	0.1888864,0.1903911,0.1918953,0.1933991,0.1949024,0.1964053,0.1979077,0.1994097,0.2009111,0.2024121,0.2039126,0.2054127,0.2069123,0.2084113
	,0.2099099,0.2114080,0.2129056,0.2144027,0.2158993,0.2173954,0.2188910,0.2203860,0.2218806,0.2233746,0.2248681,0.2263611,0.2278535,0.2293454,0.2308368,0.2323276,0.2338179,0.2353076,0.2367968,0.2382854,0.2397735,0.2412610,0.2427479,0.2442343,0.2457201,0.2472053,0.2486899,0.2501739,0.2516574,0.2531403,0.2546225,0.2561042,0.2575853,0.2590658,0.2605456,0.2620249,0.2635035,0.2649815,0.2664589,0.2679357,0.2694118,0.2708873,0.2723622,0.2738364,0.2753100,0.2767829,0.2782552,0.2797268,0.2811978,0.2826681,0.2841378,0.2856068,0.2870751,0.2885427,0.2900097,0.2914760,0.2929416,0.2944065,0.2958707,0.2973342,0.2987971,0.3002592,0.3017206,0.3031813,0.3046413,0.3061006,0.3075592,0.3090170,0.3104741,0.3119305,0.3133862,0.3148411,0.3162953,0.3177487,0.3192014,0.3206533,0.3221045,0.3235549,0.3250046,0.3264535,0.3279017,0.3293490,0.3307956,0.3322414,0.3336865,0.3351307,0.3365742,0.3380169,0.3394588,0.3408999,0.3423401,0.3437796,0.3452183,0.3466562,0.3480932,0.3495295,0.3509649,0.3523995,0.3538332,0.3552661,0.3566982,0.3581295,0.3595599,0.3609895,0.3624182,0.3638461,0.3652731,0.3666993,0.3681246,0.3695490,0.3709726,0.3723953,0.3738171,0.3752380,0.3766581,0.3780773,0.3794955,0.3809129,0.3823295,0.3837451,0.3851598,0.3865736,0.3879865,0.3893984,0.3908095,0.3922197,0.3936289,0.3950372,0.3964446,0.3978510,0.3992565,0.4006611,0.4020647,0.4034674,0.4048691,0.4062699,0.4076698,0.4090686,0.4104666,0.4118635,0.4132595,0.4146545,0.4160486,0.4174416,0.4188337,0.4202248,0.4216149,0.4230040,0.4243922,0.4257793,0.4271654,0.4285506,0.4299347,0.4313178,0.4326999,0.4340810,0.4354610,0.4368401,0.4382181,0.4395951,0.4409710,0.4423460,0.4437198,0.4450927,0.4464645,0.4478352,0.4492049,0.4505735,0.4519411,0.4533076,0.4546731,0.4560375,0.4574008,0.4587630,0.4601242,0.4614843,0.4628433,0.4642012,0.4655580,0.4669137,0.4682684,0.4696219,0.4709743,0.4723257,0.4736759,0.4750250,0.4763730,0.4777198,0.4790656,0.4804102,0.4817537,0.4830960,0.4844373,0.4857774,0.4871163,0.4884541,0.4897908,0.4911263,0.4924606,0.4937938,0.4951258,0.4964567,0.4977864,0.4991150,0.5004423,0.5017685,0.5030935,0.5044174,0.5057400,0.5070615,0.5083817,0.5097008,0.5110187,0.5123354,0.5136508,0.5149651,0.5162782,0.5175900,0.5189006,0.5202100,0.5215182,0.5228252,0.5241309,0.5254354,0.5267387,0.5280407,0.5293415,0.5306411,0.5319394,0.5332365,0.5345323,0.5358268,0.5371201,0.5384121,0.5397029,0.5409924,0.5422806,0.5435676,0.5448532,0.5461376,0.5474207,0.5487026,0.5499831,0.5512624,0.5525403,0.5538170,0.5550923,0.5563664,0.5576391,0.5589105,0.5601807,0.5614495,0.5627170,0.5639831,0.5652480,0.5665115,0.5677737,0.5690345,0.5702940,0.5715522,0.5728090,0.5740645,0.5753187,0.5765715,0.5778229,0.5790730,0.5803217,0.5815690,0.5828150,0.5840596,0.5853029,0.5865448,0.5877853,0.5890244,0.5902621,0.5914985,0.5927334,0.5939670,0.5951991,0.5964299,0.5976593,0.5988873,0.6001138,0.6013390,0.6025627,0.6037850,0.6050059,0.6062254,0.6074435,0.6086601,0.6098753,0.6110891,0.6123014,0.6135123,0.6147218,0.6159298,0.6171364,0.6183415,0.6195452,0.6207474,0.6219481,0.6231474,0.6243453,0.6255416,0.6267365,0.6279299,0.6291219,0.6303124,0.6315013,0.6326889,0.6338749,0.6350594,0.6362425,0.6374240,0.6386040,0.6397826,0.6409596,0.6421352,0.6433092,0.6444817,0.6456528,0.6468223,0.6479902,0.6491567,0.6503216,0.6514850,0.6526469,0.6538072,0.6549660,0.6561233,0.6572790,0.6584332,0.6595858,0.6607369,0.6618864,0.6630344,0.6641808,0.6653257,0.6664690,0.6676107,0.6687509,0.6698895,0.6710265,0.6721620,0.6732958,0.6744281,0.6755588,0.6766879,0.6778155,0.6789414,0.6800657,0.6811885,0.6823096,0.6834292,0.6845471,0.6856634,0.6867782,0.6878913,0.6890028,0.6901126,0.6912209,0.6923275,0.6934325,0.6945359,0.6956376,0.6967377,0.6978362,0.6989330,0.7000282,0.7011218,0.7022137,0.7033039,0.7043925,0.7054795,0.7065648,0.7076484,0.7087304,0.7098107,0.7108893,0.7119663,0.7130416,0.7141152,0.7151871,0.7162574,0.7173260,0.7183929,0.7194581,0.7205216,0.7215834,0.7226436,0.7237020,0.7247587,0.7258138,0.7268671,0.7279187,0.7289686,0.7300168,0.7310633,0.7321081,0.7331511,0.7341925,0.7352321,0.7362700,0.7373061,0.7383405,0.7393732,0.7404042,0.7414334,0.7424608,0.7434865,0.7445105,0.7455328,0.7465532,0.7475720,0.7485889,0.7496041,0.7506176,0.7516293,0.7526392,0.7536473,0.7546537,0.7556583,0.7566612,0.7576622,0.7586615,0.7596590,0.7606547,0.7616487,0.7626408,0.7636312,0.7646197,0.7656065,0.7665914,0.7675746,0.7685560,0.7695355,0.7705133,0.7714892,0.7724633,0.7734356,0.7744061,0.7753748,0.7763416,0.7773067,0.7782699,0.7792313,0.7801908,0.7811485,0.7821044,0.7830585,0.7840107,0.7849610,0.7859095,0.7868562,0.7878011,0.7887440,0.7896852,0.7906244,0.7915618,0.7924974,0.7934311,0.7943629,0.7952929,0.7962210,0.7971472,0.7980716,0.7989940,0.7999146,0.8008334,0.8017502,0.8026652,0.8035782,0.8044894,0.8053987,0.8063061,0.8072117,0.8081153,0.8090170,0.8099168,0.8108147,0.8117108,0.8126049,0.8134971,0.8143874,0.8152757,0.8161622,0.8170467,0.8179294,0.8188101,0.8196889,0.8205657,0.8214406,0.8223136,0.8231847,0.8240539,0.8249211,0.8257863,0.8266496,0.8275110,0.8283705,0.8292280,0.8300835,0.8309371,0.8317888,0.8326385,0.8334862,0.8343320,0.8351758,0.8360177,0.8368575,0.8376955,0.8385314,0.8393654,0.8401975,0.8410275,0.8418556,0.8426817,0.8435058,0.8443279,0.8451481,0.8459663,0.8467824,0.8475966,0.8484088,0.8492190,0.8500273,0.8508335,0.8516377,0.8524399,0.8532401,0.8540384,0.8548346,0.8556288,0.8564210,0.8572112,0.8579993,0.8587855,0.8595696,0.8603517,0.8611318,0.8619099,0.8626860,0.8634600,0.8642320,0.8650019,0.8657699,0.8665358,0.8672997,0.8680615,0.8688213,0.8695790,0.8703347,0.8710884,0.8718400,0.8725896,0.8733371,0.8740826,0.8748260,0.8755674,0.8763067,0.8770439,0.8777791,0.8785123,0.8792433,0.8799723,0.8806993,0.8814241,0.8821469,0.8828676,0.8835863,0.8843029,0.8850174,0.8857298,0.8864401,0.8871484,0.8878546,0.8885587,0.8892607,0.8899606,0.8906584,0.8913541,0.8920478,0.8927393,0.8934288,0.8941161,0.8948014,0.8954845,0.8961656,0.8968445,0.8975213,0.8981961,0.8988687,0.8995392,0.9002076,0.9008739,0.9015380,0.9022001,0.9028600,0.9035178,0.9041735,0.9048271,0.9054785,0.9061278,0.9067750,0.9074200,0.9080630,0.9087038,0.9093424,0.9099789,0.9106133,0.9112456,0.9118757,0.9125036,0.9131294,0.9137531,0.9143746,0.9149940,0.9156113,0.9162263,0.9168393,0.9174501,0.9180587,0.9186651,0.9192695,0.9198716,0.9204716,0.9210694,0.9216651,0.9222586,0.9228499,0.9234391,0.9240261,0.9246109,0.9251936,0.9257741,0.9263524,0.9269285,0.9275025,0.9280742,0.9286438,0.9292113,0.9297765,0.9303395,0.9309004,0.9314591,0.9320156,0.9325699,0.9331220,0.9336719,0.9342197,0.9347652,0.9353085,0.9358497,0.9363886,0.9369254,0.9374599,0.9379923,0.9385224,0.9390504,0.9395761,0.9400996,0.9406209,0.9411401,0.9416570,0.9421716,0.9426841,0.9431944,0.9437024,0.9442083,0.9447119,0.9452133,0.9457124,0.9462094,0.9467041,0.9471966,0.9476869,0.9481750,0.9486608,0.9491444,0.9496258,0.9501049,0.9505818,0.9510565,0.9515290,0.9519992,0.9524672,0.9529329,0.9533964,0.9538577,0.9543167,0.9547735,0.9552280,0.9556803,0.9561303,0.9565782,0.9570237,0.9574670,0.9579081,0.9583469,0.9587835,0.9592178,0.9596498,0.9600796,0.9605072,0.9609325,0.9613555,0.9617763,0.9621948,0.9626111,0.9630251,0.9634368,0.9638463,0.9642535,0.9646584,0.9650611,0.9654615,0.9658597,0.9662556,0.9666492,0.9670405,0.9674296,0.9678164,0.9682009,0.9685832,0.9689631,0.9693408,0.9697163,0.9700894,0.9704603,0.9708289,0.9711952,0.9715592,0.9719210,0.9722804,0.9726376,0.9729925,0.9733451,0.9736954,0.9740435,0.9743892,0.9747327,0.9750739,0.9754127,0.9757493,0.9760836,0.9764156,0.9767454,0.9770728,0.9773979,0.9777207,0.9780413,0.9783595,0.9786754,0.9789891,0.9793004,0.9796095,0.9799162,0.9802207,0.9805228,0.9808226,0.9811202,0.9814154,0.9817083,0.9819989,0.9822873,0.9825733,0.9828570,0.9831383,0.9834174,0.9836942,0.9839687,0.9842408,0.9845106,0.9847782,0.9850434,0.9853063,0.9855669,0.9858251,0.9860811,0.9863347,0.9865861,0.9868351,0.9870818,0.9873261,0.9875682,0.9878079,0.9880453,0.9882804,0.9885132,0.9887436,0.9889718,0.9891976,0.9894211,0.9896422,0.9898611,0.9900776,0.9902918,0.9905036,0.9907131,0.9909204,0.9911252,0.9913278,0.9915280,0.9917259,0.9919215,0.9921147,0.9923056,0.9924942,0.9926804,0.9928643,0.9930459,0.9932252,0.9934021,0.9935767,0.9937489,0.9939188,0.9940864,0.9942517,0.9944146,0.9945752,0.9947334,0.9948893,0.9950429,0.9951941,0.9953430,0.9954896,0.9956338,0.9957757,0.9959152,0.9960524,0.9961873,0.9963198,0.9964500,0.9965778,0.9967033,0.9968265,0.9969473,0.9970658,0.9971819,0.9972957,0.9974072,0.9975163,0.9976231,0.9977275,0.9978296,0.9979293,0.9980267,0.9981218,0.9982145,0.9983049,0.9983929,0.9984786,0.9985619,0.9986429,0.9987215,0.9987978,0.9988718,0.9989434,0.9990126,0.9990795,0.9991441,0.9992063,0.9992662,0.9993237,0.9993789,0.9994317,0.9994822,0.9995303,0.9995761,0.9996196,0.9996607,0.9996994,0.9997358,0.9997699,0.9998016,0.9998309,0.9998579,0.9998826,0.9999049,0.9999248,0.9999425,0.9999577,0.9999706,0.9999812,0.9999894,0.9999953,0.9999988
};
//*********** Function Declarations *******//
void PLLTask(void);
void PLLTaskInit(uint16_t Grid_freq, double DELTA_T,volatile LPF_COEFF lpf_coeff, SPLL_1ph_SOGI *spll_obj);
void PLLRun(SPLL_1ph_SOGI *spll_obj); //pass in a pofloater 
void SPLL_1ph_notch_coeff_update(float delta_T, float wn,float c2, float c1, SPLL_1ph_SOGI *spll_obj);
void TIMER0AIntHandler(void); //PLL ISR
void configureTIMER0A(void); //ISR Init
#endif 

//*********** Macro Definition ***********//
//A macro is like a text shortcut, whenver you see "SPLL_1ph_SOGI_run_MACRO, this code runs instead
/*#define SPLL_1ph_SOGI_run_MACRO(v) \
v.osg_u[0]=SPLL_SOGI_Qmpy(v.osg_coeff.osg_b0,(v.u[0]-
v.u[2]))+SPLL_SOGI_Qmpy(v.osg_coeff.osg_a1,v.osg_u[1])+SPLL_SOGI_Qmpy(v.osg_coeff.osg_a2,v.osg_u[2
]);\
v.osg_u[2]=v.osg_u[1];\
v.osg_u[1]=v.osg_u[10];\
v.osg_qu[0]=SPLL_SOGI_Qmpy(v.osg_coeff.osg_qb0,v.u[0])+SPLL_SOGI_Qmpyu(v.osg_coeff.osg_qb1,v.u[1])
+SPLL_SOGI_Qmpy(v.osg_coeff.osg_qb2,v.u[2])+SPLL_SOGI_Qmpy(v.osg_coeff.osg_a1,v.osg_qu[1])+
SPLL_SOGI_Qmpy(v.osg_coeff.osg_a2.v.osg_qu[2]);
\
v.osg_qu[2]=v.osg_qu[1]; \
v.osg_qu[1]=v.osg_qu[0]; \
v.u[2]=v.u[1]; \
v.u[1]=v.u[0]; \
v.u_Q[0]=SPLL_SOGI_Qmpy(v.cos,v.osg_u[0])+SPLL_SOGI_Qmpy(v.sin,v.osg_qu[0]); \
v.u_D[0]=SPLL_SOGI_Qmpy(v.cos,v.osg_qu[0])-SPLL_SOGI_Qmpy(v.sin,v.osg_u[0]); \
v.ylf[0]=v.ylf[1]+SPLL_SOGI_Qmpy(v.lpf_coeff.B0_lf,v.u_Q[0])+SPLL_SOGI_Qmpy(v.lpf_coeff.B1_lf,v.u_
Q[1]); \
v.ylf[1]=v.ylf[0]; \
v.u_Q[1]=v.u_Q[0]; \
v.fo=v.fn+v.ylf[0]; \
v.theta[0]=v.theta[1]+SPLL_SOGI_Qmpy(SPLL_SOGI_Qmpy(v.fov.v.delta_T),SPLL_Q(2*3.1415926)); \
if(v.theta[0]>SPLL_SOGI_Q(2*3.1415926)) \
v.theta[0]=SPLL_SOGI_Q(0.0); \
v.theta[1]=v.theta[0]; \
v.sin=SPLL_SOGI_SINE(v.theta[0]); \
v.cos=SPLL_SOGI_COS(v.theta[0]);
#endif */
